// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function plusOne(x) {
  return x + 1 | 0;
}

function curring(param) {
  var x = 2;
  var y = param;
  var z = x;
  return z + y;
}

curring(3.6);

var numbers = /* :: */[
  4,
  /* :: */[
    11,
    /* :: */[
      5,
      /* [] */0
    ]
  ]
];

function add(x, y) {
  return x + y | 0;
}

List.map((function (x) {
        return 4 + x | 0;
      }), numbers);

List.map((function (param) {
        return 4 + param | 0;
      }), numbers);

function name(firstName, middleName, lastName, param) {
  if (middleName !== undefined) {
    return firstName + (" " + (middleName + (" " + lastName)));
  } else {
    return firstName + (" Lala " + lastName);
  }
}

name("John", undefined, "Doe", /* () */0);

name("John", "Francis", "Doe", /* () */0);

function name$1(firstName, $staropt$star, lastName, param) {
  var middleName = $staropt$star !== undefined ? $staropt$star : "Francis";
  return firstName + (" " + (middleName + (" " + lastName)));
}

name$1("John", undefined, "Doe", /* () */0);

var someName = "Francis";

name$1("John", someName, "Doe", /* () */0);

var middleName = "Francis";

name$1("John", middleName, "Doe", /* () */0);

var firstName = "John";

name$1(firstName, someName, "Doe", /* () */0);

function hello(param) {
  return "Hello!";
}

List.map((function (item) {
        return item;
      }), /* :: */[
      1,
      /* :: */[
        2,
        /* :: */[
          4,
          /* [] */0
        ]
      ]
    ]);

List.map((function (_item) {
        return 0;
      }), /* :: */[
      1,
      /* :: */[
        2,
        /* :: */[
          4,
          /* [] */0
        ]
      ]
    ]);

List.map((function (param) {
        return 0;
      }), /* :: */[
      1,
      /* :: */[
        2,
        /* :: */[
          4,
          /* [] */0
        ]
      ]
    ]);

List.map((function (param) {
        return 0;
      }), /* :: */[
      1,
      /* :: */[
        2,
        /* :: */[
          4,
          /* [] */0
        ]
      ]
    ]);

var alert = "ALERT";

$$String.capitalize($$String.lowercase(alert));

var info = $$String.lowercase($$String.capitalize(alert));

List.find((function (x) {
        return x > 4;
      }), List.rev(List.sort(Caml_obj.caml_compare, /* :: */[
              1,
              /* :: */[
                2,
                /* :: */[
                  3,
                  /* :: */[
                    5,
                    /* [] */0
                  ]
                ]
              ]
            ])));

function addTillTen(_x) {
  while(true) {
    var x = _x;
    if (x < 10) {
      Pervasives.print_int(x);
      _x = x + 1 | 0;
      continue ;
    } else {
      return 0;
    }
  };
}

function even(x) {
  if (x === 0) {
    return true;
  } else {
    return !even(x - 1 | 0);
  }
}

function odd(x) {
  return !even(x);
}

exports.plusOne = plusOne;
exports.curring = curring;
exports.numbers = numbers;
exports.add = add;
exports.name = name$1;
exports.someName = someName;
exports.middleName = middleName;
exports.firstName = firstName;
exports.hello = hello;
exports.alert = alert;
exports.info = info;
exports.addTillTen = addTillTen;
exports.odd = odd;
exports.even = even;
/*  Not a pure module */
